Add a bottom-left toggle switch called “God Mode” that flattens the entire current subtree into a single fractal/radial view: the root at the center, all descendants visible at once, arranged in depth rings with angular sectors proportional to subtree size. Keep OrbitControls enabled so the user can zoom in/out and pan. Implement cleanly with these requirements.

TECH + FILES (match existing stack)
- React + TypeScript, Zustand, Tailwind. R3F + drei. Keep worker-based layout.
- Add files:
  - src/components/GodModeToggle.tsx  // UI switch (bottom-left)
  - src/workers/godLayout.ts          // pure radial “tidy” layout in a Web Worker
  - src/scene/useGodModeFit.ts        // camera fit effect
- Patch:
  - src/state/useStore.ts             // godMode state, toggler, layout results cache
  - src/scene/MindMap.tsx             // switch between force layout and God Mode positions
  - src/scene/Edges.tsx               // works with either position source

UI: TOGGLE
- Bottom-left fixed switch labeled “God Mode”. Tailwind: rounded-full pill, small description text, aria-pressed, keyboard toggle with Space/Enter.
- On enable: compute God layout in worker for current rootId; freeze force layout; animate camera to fit the full graph; breadcrumb stays.
- On disable: restore previous camera pose (store last pose) and return to normal layout.

STATE (Zustand additions)
type GodLayout = Map<string, {x:number;y:number;z:number;depth:number;theta:number;radius:number}>
state: {
  godMode: boolean
  setGodMode(b:boolean): void
  godLayout: GodLayout | null
  setGodLayout(g:GodLayout|null): void
  lastCameraPose?: {pos:[number,number,number]; target:[number,number,number]}
}
- When toggled ON: save current camera pose, request layout; when worker returns, set godLayout and flag godMode=true.
- When toggled OFF: restore lastCameraPose and clear godLayout.

LAYOUT MATH (Worker: src/workers/godLayout.ts)
Goal: stable, overlap-resistant, scale to thousands of nodes. Use a radial Reingold–Tilford “tidy tree” with sector allocation by subtree leaf count, rendered as concentric rings in 3D (small z jitter by depth for depth cue).

1) Build rooted tree from current rootId using existing graph.
2) Compute weights:
   - leafCount(v) = 1 if v has no children else sum(leafCount(c))
   - size(v) = 1 + Σ size(children)  // optional diagnostic
3) Assign angular sectors recursively:
   - For node v with sector [α, β], children c_k get sectors proportional to leafCount:
     let W = Σ_k leafCount(c_k)
     each child c_k gets span Δθ_k = (leafCount(c_k)/W) * (β-α)
     child sector = [α + Σ_{i<k} Δθ_i, α + Σ_{i≤k} Δθ_i]
   - Enforce minimum separation ε at each depth:
     ε(depth) = max(0.002π, 2*asin(r_node(depth)/r(depth)))  // r_node is visual radius estimate
     If Δθ_k < ε, clamp to ε and renormalize siblings.
4) Radii per depth:
   - r(0)=0; for d≥1: r(d) = r0 * d^γ with r0≈6 and γ≈0.95 to compress deep layers.
   - Optionally expand if the ring becomes crowded:
     let needed_circumference = Σ_k (2*r_node(d) + gap)
     if 2π r(d) < needed_circumference ⇒ scale r(d) by factor = needed_circumference/(2π r(d)).
5) Node coordinates:
   - Place each node at polar (r(depth), θ_midpoint) within its sector.
   - θ_midpoint = (α+β)/2 + k*φ_small where φ_small=0.015 rad * index to avoid perfect collinearity.
   - Convert to Cartesian:
     x = r(d) cos θ_midpoint
     y = r(d) sin θ_midpoint
     z = d * zStep + jitter, with zStep≈0.15 and jitter in [-0.05,0.05].
6) Edges: draw all edges lightly (opacity scaled by depth). No force sim in God Mode.

Worker API:
- postMessage({type:"GOD_LAYOUT_REQUEST", rootId, nodes, childrenById})
- onmessage -> {type:"GOD_LAYOUT_RESULT", positions: { [id]: {x,y,z,depth,theta,radius} }, bounds:{min:[x,y,z], max:[x,y,z]}}

ROBUSTNESS
- Validate all numbers: replace non-finite with 0.
- If a node has many children (high branching), ring-scaling step ensures no overlap by increasing r(depth).
- Algorithm is O(N) over the tree; stable ordering of siblings by title to keep deterministic layout.

CAMERA FIT (src/scene/useGodModeFit.ts)
- On God Mode enable or layout result, compute bounding sphere from bounds.
- Animate camera position and target using a damped spring to frame the sphere:
  distance = k * radius / tan(fov/2), k≈1.2
  aim along current camera direction to avoid jarring rotations. Maintain OrbitControls enabled; set minDistance=radius*0.4, maxDistance=radius*8.
- On disable, restore previous pose.

SCENE SWITCH (MindMap.tsx)
- Source node positions from:
  - godMode ? godLayout.get(id) : forceLayout positions.
- Disable physics/worker ticks while godMode is true.
- Keep selection/hover/labels exactly as before.

ZOOM/PAN
- OrbitControls already supports this. Ensure it remains active in God Mode; only recenter once on entry using useGodModeFit.

UI COMPONENT (src/components/GodModeToggle.tsx)
- A pill switch fixed bottom-left, z-index above canvas.
- Example look: “◉ God Mode” when on; “○ God Mode” when off.
- Click or Space/Enter toggles; useStore.setGodMode(!godMode).

EDGES + LABELS IN GOD MODE
- Reduce edge thickness and fade with depth.
- Show labels on hover/selection; optionally always show titles for depth≤1 to aid navigation.

PERF
- Use instanced spheres/lines as in normal mode.
- For N>3000, skip HTML descriptions by default; re-enable on zoom-in when distance < threshold.

ACCEPTANCE TESTS
1) Toggling ON lays out the entire subtree deterministically: no overlaps on first two rings; deeper rings automatically expand. Toggling OFF restores previous view.
2) Zoom and pan work seamlessly in God Mode; OrbitControls limits adapt to bounding sphere.
3) Works for highly unbalanced trees and very wide first-level fan-out.
4) Layout is computed off the main thread; UI remains responsive during computation.

IMPLEMENTATION STARTERS (write these)
- src/components/GodModeToggle.tsx: a fixed-position switch that calls setGodMode.
- src/workers/godLayout.ts: export function computeGodLayout(rootId, graph) and worker message loop implementing steps 1–6.
- src/scene/useGodModeFit.ts: hook that listens to godMode/godLayout and animates camera.
- Wire MindMap to use godLayout when present.

STYLING
- Minimal: bottom-left pill with subtle shadow. Example Tailwind:
  className="fixed bottom-6 left-6 select-none px-3 py-2 rounded-full bg-neutral-900/80 text-neutral-100 backdrop-blur border border-white/10 hover:bg-neutral-800"
- Respect current accent color by tinting the dot with the root hue.

DO NOT remove existing controls. Double-click still drills (exits God Mode automatically after drill), single-click selects. Provide a lightweight README section describing God Mode and its math.
