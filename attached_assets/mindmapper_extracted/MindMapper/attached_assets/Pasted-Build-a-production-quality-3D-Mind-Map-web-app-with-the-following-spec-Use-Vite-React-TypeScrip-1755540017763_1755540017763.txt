Build a production-quality 3D Mind-Map web app with the following spec. Use Vite + React + TypeScript. Rendering via react-three-fiber (R3F) + drei + three. Physics/layout via d3-force-3d in a Web Worker. State via Zustand. Local persistence via Dexie (IndexedDB). Optional cloud sync interface (stub) for future Supabase; keep the app fully offline-first. Styling via TailwindCSS (minimal, whitespace-first). Animations via framer-motion. Text in 3D via troika-three-text. Fuzzy search via fuse.js. Color math via culori (OKLCH). No server required.

NAME
- Project: "Lattice"
- Tagline: "Minimal 3D mind maps that drill down like folders."

NON-NEGOTIABLE UX
- Extremely minimalist: no visible chrome beyond a breadcrumb, a tiny help/menu, and a command palette.
- Fluid, 60fps feel on modest laptops; handle thousands of nodes using instancing and worker-based layout.
- Every node is “a space.” Clicking a node recenters and opens a new mind map with that node as root. Breadcrumb shows path.
- Accent color sync: each map inherits a hue from its parent; children receive perceptually spaced accents derived from the parent hue.
- Few, memorable controls. Everything else is available via ⌘K/Ctrl+K command palette.

CONTROLS (desktop + trackpad/mouse)
- Orbit: Left-drag (or one-finger drag trackpad).
- Pan: Right-drag or Shift+Left-drag (two-finger drag trackpad).
- Zoom: Mouse wheel / pinch.
- Select node: Single click.
- Recenter/drill into node: Double-click or Enter.
- Create node: Space (positions at cursor raycast) or ⌘K → “New node”.
- Edit title: E (inline editor floating near node) or ⌘K → “Rename”.
- Link selection to another: L (then click target) or ⌘K → “Link to…”.
- Back to parent: Backspace or breadcrumb click.
- Toggle auto-layout: G (on/off per scene).
- Recolor subtree from current root: C.
- Quick search/jump: ⌘K/Ctrl+K.
- Deselect: Esc.
- Export/Import JSON: via ⌘K commands.
- Mobile: tap to select, double-tap to drill, two-finger pan, pinch zoom; long-press opens context sheet.

DATA MODEL (TypeScript)
- Node {
    id: string
    parentId: string | null
    title: string
    body?: string
    tags?: string[]
    color: { oklch: { l:number; c:number; h:number } } // accent at creation
    createdAt: number
    updatedAt: number
    links: string[] // additional edges besides parent-child
}
- Map view = one “rootId” plus immediate children + linked neighbors in a radius.
- Persist graph in Dexie tables: nodes, settings, sessions. Migrations supported.

COLOR SYNC ALGORITHM
- App stores a root hue h0 for the current root. Children colors are generated by rotating hue by k·φ mod 360 where φ = 137.508° (golden angle), depth-aware lightness/chroma damping in OKLCH:
  - child.h = parent.h + k*φ
  - child.c = clamp(parent.c * 0.92, 0, 0.25)
  - child.l = clamp(parent.l + sign(0.5-parent.l)*0.04, 0.35, 0.9)
- All UI accents and breadcrumb dot take the current root hue. Use culori to convert to CSS.

LAYOUT
- Use d3-force-3d inside a dedicated Web Worker. R3F main thread only renders.
- Forces: link (parent-child + user links), collision (radius from label length), many-body (repulsive), center, and slight z jiggle for depth.
- Recompute incrementally; on add/move, worker ticks for a short burst and then cools.
- Provide “G” toggle to freeze/unfreeze layout.

RENDERING & PERFORMANCE
- Nodes: R3F <Instances> spheres for instanced rendering; one TroikaText per selected/hovered node; otherwise use a lightweight projected label (HTML) with fade-in on hover to save draw calls.
- Edges: THREE.LineSegments2 (fat lines) for crispness; for large graphs downgrade to LineSegments automatically.
- GPU budget aware: if >2k visible nodes, reduce text, edge thickness, and raycast frequency; switch to sprite labels.
- Smooth camera transitions with damped springs (use drei’s useSpring or custom dampers); double-click centers the target node.

UI SURFACE (Tailwind)
- Top-left: breadcrumb “root / child / …” with a small colored dot indicating current root hue.
- Top-right: “?” minimal help popover + a single kebab menu with Export/Import/Settings.
- Center-bottom: a subtle “+” floating action button on mobile only. Desktop relies on ⌘K and Space.
- Command palette: cmdk with actions: New node, Rename, Link, Drill up, Toggle layout, Search node, Export, Import, Delete node, Recolor subtree.

ACCESSIBILITY
- Breadcrumb and command palette fully keyboard navigable; labels have aria-live updates; high-contrast theme toggle in Settings.

FILES & STRUCTURE
- /src/main.tsx – React bootstrap
- /src/App.tsx – shell, breadcrumbs, palette, overlays
- /src/scene/MindMap.tsx – R3F Canvas, camera, nodes, edges, interaction
- /src/scene/Nodes.tsx – instanced nodes + picking logic
- /src/scene/Edges.tsx – edges rendering
- /src/state/useStore.ts – Zustand store for graph, selection, UI state
- /src/db/db.ts – Dexie schema, migrations, import/export
- /src/workers/layout.ts – d3-force-3d worker (ES module, Vite new URL(..., import.meta.url))
- /src/lib/colors.ts – culori helpers for OKLCH palette
- /src/lib/geometry.ts – radius/label sizing, hit areas
- /src/lib/camera.ts – camera spring helpers
- /src/components/CommandPalette.tsx – cmdk wired to actions
- /src/components/InlineEditor.tsx – floating text editor
- /src/components/Help.tsx – minimal shortcuts sheet
- /src/types.ts – shared types

DEPENDENCIES
- react, react-dom, typescript, vite
- three, @react-three/fiber, @react-three/drei, troika-three-text
- d3-force-3d
- zustand
- dexie
- fuse.js
- culori
- tailwindcss, postcss, autoprefixer
- framer-motion
- cmdk
- class-variance-authority, clsx (lightweight class helpers)

INTERACTION DETAILS
- Hover highlights node with subtle bloom-like halo (postprocessing optional; if used, keep lightweight).
- Selection shows a larger label and thin ring.
- Double-click recenters with 400–700 ms ease; after recenter, re-query children in store for the new root and re-run a short layout burst.
- Space creates a node at the cursor raycast point at ~fixed radius from center; auto-links to current root.
- Link mode L: cursor changes; next click creates a link; escape cancels.
- Inline editor: E focuses a small text input positioned in screen space near the node; Enter saves; Esc cancels.

STATE & PERSISTENCE
- Autosave every mutation debounced 500 ms.
- Project Settings: theme (light/dark), motion (reduced), performance cap (node label mode thresholds), layout defaults, export/import.
- Export: single JSON file with version + nodes array. Import merges by id with conflict suffixes.

SEED CONTENT
- On first run, create a root node “My Map” with a few children: “Revision”, “Ideas”, “Reading”, each with 3 sample children. Use distinct child hues derived from root.

KEY COMPONENT ACCEPTANCE
1) Performance: With 2,000 nodes and 2,500 edges visible, maintain interactive orbiting and selection >30fps on a typical 2020 MacBook Air; degrade gracefully (labels off, thinner lines).
2) Drill-down: Double-clicking any node re-roots and recolors UI in <100 ms perceived delay (actual data switch immediate; layout continues cooling in background).
3) Search: ⌘K then typing fuzzy-matches titles; hitting Enter recenters on result; if result is outside current root subtree, app jumps to that subtree and updates breadcrumb.
4) Persistence: Refresh the browser and return to the last viewed root and camera pose.
5) Mobile: tap/drag/pinch works; command palette available via visible “Search/Command” button.

CODE QUALITY
- Strict TypeScript; no any. Small, pure utilities. No global mutable singletons besides Zustand/Dexie singletons. Components under 300 LOC. Clear separation of render vs worker compute.
- Comments at the top of complex files explaining design choices and complexity budgets.
- Include a concise README with shortcuts and architecture notes.

SCRIPTS
- npm run dev – Vite dev
- npm run build – build
- npm run preview – preview

IMPLEMENTATION STARTERS (write these files):
- src/types.ts defining Node, AppSettings, etc.
- src/lib/colors.ts with OKLCH helpers and golden-angle palette.
- src/workers/layout.ts implementing postMessage({type:"tick", nodes, links}) and emitting updated positions over time.
- src/scene/MindMap.tsx with <Canvas>, OrbitControls, Instances, picking, and camera springs.
- src/components/CommandPalette.tsx wired to actions in Zustand.
- src/db/db.ts Dexie schema + export/import.

VISUAL STYLE
- Neutral background (#0b0f14 dark, #f8fafc light).
- Nodes: soft matte material; subtle depth cue; edges slightly dimmer than nodes.
- Labels: only on hover/selection unless small graphs.

DELIVERABLE
- A runnable Replit project meeting the above acceptance criteria on first run, with the seed graph and all shortcuts functioning. Keep the UI visually sparse and elegant.
